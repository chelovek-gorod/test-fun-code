import { Assets } from 'pixi.js'
import { fonts, uploadAssets } from './loader'
import { initFontStyles } from './fonts'
import { startGame } from '../game'
import { EventHub, events, setLevel, setCommands, changeBg, stopBg, showTestBot, editCloudSpeed } from './events'
import { ACTIONS, CLOUDS } from "../constants"

let level = null
EventHub.on( events.setLevel, (data) => level = data )

// preload fonts
Assets.addBundle('fonts', fonts)
Assets.loadBundle('fonts').then( fontsData => {
    // update font values by font family
    for(let key in fontsData) fonts[key] = fontsData[key].family
    initFontStyles()
    uploadAssets( awaitLevel )
})

function awaitLevel() {
    if (level) return startGame(level)
    setTimeout(awaitLevel, 100)
}

/////////////////////////////////////

//    –ù–ò–ñ–ï –í–ï–°–¨ –ö–û–î –î–õ–Ø –¢–ï–°–¢–û–í     //

////////////////////////////////////

const startMap = {
    "map":[
        [ 0,  0,  0,  0,  0,  0,  0,  0,  0],
        [ 0,  0,  1,  1,  1,  0,  0,  1,  1],
        [ 1,  1,  1,  0,  1,  0,  0,  1,  0],
        [ 1,  0,  0,  0,  1,  0,  0,  1,  0],
        [91,  0, 92,  8,  1,  1,  0,  0,  0],
        [41,  0,  1,  1,  0,  0,  1,  1, 61],
        [ 1,  0,  7,  1,  0,  0,  1,  2,  1],
        [ 3,  0,  0,  1, 53,  1,  1,  1,  1],
        [ 0,  0,  0,  0,  0,  0,  0,  0,  0]
    ],
    "botDirection": "down",
    "inventory":["key_green"]
}

const inventoryTableUnicode = {
    key_red : {color: 'red', icon: '‚öø'},
    key_yellow : {color: 'yellow', icon: '‚öø'},
    key_green : {color: 'green', icon: '‚öø'},
    key_blue : {color: 'blue', icon: '‚öø'},
    gun : {color: 'orange', icon: 'üó≤'},
    empty : {color: 'gray', icon: '‚Éû'}
}

const mapTableUnicode = {
    0 : '',
    1 : 'üèª‚Éû',
    2 : { left: '‚á¶', right: '‚á®', up: '‚áß', down: '‚á©' },
    3 : '‚úµ',
    4 : '‚áï',
    5 : '‚áî',
    6 : '‚öø',
    7 : 'üó≤',
    8 : 'üùô',
    9 : { right: '‚çà', down: '‚çó' },
}
const mapColorIndex = { 1 : 'red', 2 : 'yellow', 3 : 'green', 4 : 'blue' }
const mapSideIndex = { 1 : 'right', 2 : 'down', 3 : 'left', 4 : 'up' }

let tableSize = startMap.map.length > startMap.map[0].length ? startMap.map.length : startMap.map[0].length

document.body.onload = () => {
    // INVENTORY
    const inventoryLine = document.getElementById('inventory-line')
    for(let i = 0; i < 5; i++) {
        const inventoryCeil = document.createElement('td')
        inventoryCeil.onclick = () => console.log('+')
        inventoryCeil.className = 'inventory-ceil'
        if (startMap.inventory[i]) {
            inventoryCeil.style.backgroundColor = inventoryTableUnicode[ startMap.inventory[i] ].color
            inventoryCeil.innerText = inventoryTableUnicode[ startMap.inventory[i] ].icon
        } else {
            inventoryCeil.style.backgroundColor = inventoryTableUnicode.empty.color
            inventoryCeil.innerText = inventoryTableUnicode.empty.icon
        }
        inventoryLine.append(inventoryCeil)
    }
    
    // MAP SIZE
    const valueMapSizeSpan = document.getElementById('valueMapSize')
    valueMapSizeSpan.innerText = tableSize

    const supMapSizeButton = document.getElementById('supMapSize')
    supMapSizeButton.onclick = () => resizeTable(false)

    const addMapSizeButton = document.getElementById('addMapSize')
    addMapSizeButton.onclick = () => resizeTable(true)

    function resizeTable(isAdd) {
        tableSize += isAdd ? 1 : -1
        if (tableSize < 1) tableSize = 1
        if (tableSize > 13) tableSize = 13
        valueMapSizeSpan.innerText = tableSize
    }

    // MAP TABLE
    const mapTable = document.getElementById('map-table')

    for(let y = 0; y < tableSize; y++) {
        const row = document.createElement('tr')
        row.dataset.y = y
        mapTable.append(row)
        for(let x = 0; x < tableSize; x++) {
            const ceil = document.createElement('td')
            ceil.dataset.x = x
            ceil.addEventListener('click', getCeilClick)
            const ceilData = startMap.map[y][x]

            if (ceilData !== 0) ceil.style.backgroundColor = '#ff9800'

            switch(ceilData) {
                case 2 : ceil.innerText = mapTableUnicode[2][startMap.botDirection]; break;
                case 3 : ceil.innerText = mapTableUnicode[3]; break;

                case 41:
                case 42:
                case 43:
                case 44:
                case 51:
                case 52:
                case 53:
                case 54:
                    ceil.style.backgroundColor = mapColorIndex[(''+ceilData)[1]]
                    ceil.innerText = mapTableUnicode[(''+ceilData)[0]]
                break

                case 61:
                case 62:
                case 63:
                case 64:
                    ceil.style.backgroundColor = mapColorIndex[(''+ceilData)[1]]
                    ceil.innerText = mapTableUnicode[(''+ceilData)[0]]
                break

                case 7: ceil.innerText = mapTableUnicode[7]; break;
                case 8: ceil.innerText = mapTableUnicode[8]; break;

                case 91:
                case 92:
                    ceil.style.backgroundColor = 'maroon'
                    ceil.innerText = mapTableUnicode[9][ mapSideIndex[(''+ceilData)[1]] ]
                break 
            }
            row.append(ceil)
        }
    }


    function getCeilClick(event) {
        const ceil = event.target
        ceil.innerText = '+'
        console.log( ceil)
    }
}

/*

const HTML = `
<div id="helpText" style="font-size: 16px; padding: 20px;">
                    <b>"map" - –∫–∞—Ä—Ç–∞</b><br>
                     0 - –ø—É—Å—Ç–æ—Ç–∞; 1 - ‚Éû –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞; 2 - —Ä–æ–±–æ—Ç; 3 - —Ü–µ–ª–µ–≤–∞—è –∫–ª–µ—Ç–∫–∞;<br>
                     41, 42, 43, 44 - ‚ñ• –î–≤–µ—Ä—å ‚¨ç (–∫—Ä–∞—Å–Ω–∞—è, –∂–µ–ª—Ç–∞—è, –∑–µ–ª–µ–Ω–∞—è, —Å–∏–Ω—è—è) - —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω—É–∂–µ–Ω –∫–ª—é—á;<br>
                     51, 52, 53, 54 - ‚ñ§ –î–≤–µ—Ä—å ‚¨å (–∫—Ä–∞—Å–Ω–∞—è, –∂–µ–ª—Ç–∞—è, –∑–µ–ª–µ–Ω–∞—è, —Å–∏–Ω—è—è) - —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω—É–∂–µ–Ω –∫–ª—é—á;<br>
                     61, 62, 63, 64 - –ö–ª—é—á (–∫—Ä–∞—Å–Ω—ã–π, –∂–µ–ª—Ç—ã–π, –∑–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π) –Ω–∞—Å—Ç—É–ø–∏–ª - —Å–æ–±—Ä–∞–ª;<br>
                     7 - –æ—Ä—É–∂–∏–µ (–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—Ä—É–∂–∏–µ–º –Ω–∞–ø—Ä–æ—Ç–∏–≤ –º–æ–Ω—Å—Ç—Ä–∞ - —É–Ω–∏—á—Ç–æ–∂–∏—Ç –º–æ–Ω—Å—Ç—Ä–∞)<br>
                     8 - –∫–∞–º–µ–Ω—å, –¥–µ–π—Å—Ç–≤–∏–µ - —Å–º–µ—Å—Ç–∏—Ç –≤ –∫–ª–µ—Ç–∫—É –Ω–∞–ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞<br>
                     91, 92 - –º–æ–Ω—Å—Ç—Ä (–≤–Ω–∏–∑, –ø—Ä–∞–≤–æ) - —É–Ω–∏—á—Ç–æ–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—Ä—É–∂–∏–µ–º –Ω–∞–ø—Ä–æ—Ç–∏–≤ –º–æ–Ω—Å—Ç—Ä–∞<br>
                    <br>
                    <b>"botDirection" - –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞</b><br>
                    "left" - –≤–ª–µ–≤–æ (—Å–º–æ—Ç—Ä–∏—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)<br>
                    "right" - –≤–ø—Ä–∞–≤–æ (—Å–º–æ—Ç—Ä–∏—Ç –≤ –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)<br>
                    "up" - –≤–≤–µ—Ä—Ö (—Å–º–æ—Ç—Ä–∏—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)<br>
                    "down" - –≤–Ω–∏–∑ (—Å–º–æ—Ç—Ä–∏—Ç –≤ –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)<br>
                    <br>
                    <b>"inventory" - —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è</b><br>
                    "key_red" - ‚öø –∫—Ä–∞—Å–Ω—ã–π –∫–ª—é—á<br>
                    "key_yellow" - ‚öø –∂–µ–ª—Ç—ã–π –∫–ª—é—á<br>
                    "key_green" - ‚öø –∑–µ–ª–µ–Ω—ã–π –∫–ª—é—á<br>
                    "key_blue" - ‚öø —Å–∏–Ω–∏–π –∫–ª—é—á<br>
                    "gun" - –æ—Ä—É–∂–∏–µ (–¥–ª—è –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞)<br>
                </div>
                <div id="map-generator" style="font-size: 16px; padding: 20px;">
                    <label for="map-size">—Ä–∞–∑–º–µ—Ä –ø–æ–ª—è:</label>
                    <input type="number" value=1 min=1 step=1 id="map-size">
                    <table></table>
                </div>
                <textarea id="testData" style="width: 100%; height: 250px; background-color: #00000077; color: white; font-weight: bold; font-size: 14px;"> 
                </textarea>
                
                <div id="helpActionsText" style="font-size: 16px; padding: 20px 20px 0; display: none;">
                    <b>–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:</b><br>
                    <span id="commandRightSpan" style="cursor: pointer;">[‚Ü∑]</span> (—Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ) - –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ;<br>
                    <span id="commandLeftSpan" style="cursor: pointer;">[‚Ü∂]</span> (—Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ) - –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ;<br>
                    <span id="commandForwardSpan" style="cursor: pointer;">[‚¨Ü]</span> (—Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö) - –®–∞–≥ –≤–ø–µ—Ä–µ–¥;<br>
                    <span id="commandActionSpan" style="cursor: pointer;">[‚ú™]</span> (–ø—Ä–æ–±–µ–ª) - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä—É–∂–∏–µ / —Ç–æ–ª–∫–Ω—É—Ç—å –∫–∞–º–µ–Ω—å)<br>
                    <b><span id="commandStartSpan" style="cursor: pointer;">[Enter]</span></b> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥<br>
                    <br>
                    <span id="testBotSpan" style="cursor: pointer;"><b>[t]</b></span> - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –¥–æ–ø. –±–æ—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∫—É—Ä—Å–µ<br>
                    <span id="bgSpeedSpan" style="cursor: pointer;"><b>[s]</b></span> - —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è<br>
                    <span id="cloudSpeedSupSpan" style="cursor: pointer;"><b>[&lt;]</b></span><span id="cloudSpeedSpan"></span><span id="cloudSpeedAddSpan" style="cursor: pointer;"><b>[&gt;]</b></span> +/- —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–ª–∞–∫–æ–≤
                    <br>
                    <br><b>–ö–û–ú–ê–ù–î–´:</b>
                </div>
                <div id="actionsStack" style="font-size: 16px; padding: 20px; display: none; background-color: #00000077; color: white; font-weight: bold;">

                </div>

                <button id="applyTestData" style="display: block; margin: 5px auto; border-radius: 12px; font-size: 18px; font-weight: bold; padding: 4px 12px;">
                    –ü–†–ò–ú–ï–ù–ò–¢–¨
                </button>
            </div>
`

const helpText = document.getElementById('helpText')
const testDataText = document.getElementById('testData')
const applyButton = document.getElementById('applyTestData')

const helpActionsText = document.getElementById('helpActionsText')
const actionsStack = document.getElementById('actionsStack')

const cloudSpeedSpan = document.getElementById('cloudSpeedSpan')

const commandRightSpan = document.getElementById('commandRightSpan')
commandRightSpan.onclick = () => {commands.push(ACTIONS.right); actionsStack.innerText += "‚Ü∑"}
const commandLeftSpan = document.getElementById('commandLeftSpan')
commandLeftSpan.onclick = () => {commands.push(ACTIONS.left); actionsStack.innerText += "‚Ü∂"}
const commandForwardSpan = document.getElementById('commandForwardSpan')
commandForwardSpan.onclick = () => {commands.push(ACTIONS.forward); actionsStack.innerText += "‚¨Ü"}
const commandActionSpan =document.getElementById('commandActionSpan')
commandActionSpan.onclick = () => {commands.push(ACTIONS.use); actionsStack.innerText += "‚ú™"}
const commandStartSpan = document.getElementById('commandStartSpan')
commandStartSpan.onclick = () => {
    actionsStack.innerText = "";
    setCommands({ commands: [...commands], callback: commandsDone, })
    commands = []
}
const testBotSpan = document.getElementById('testBotSpan')
testBotSpan.onclick = showTestBot
const bgSpeedSpan = document.getElementById('bgSpeedSpan')
bgSpeedSpan.onclick = stopBg
const cloudSpeedSupSpan = document.getElementById('cloudSpeedSupSpan')
cloudSpeedSupSpan.onclick = () => changeCloudSpeed(false)
const cloudSpeedAddSpan = document.getElementById('cloudSpeedAddSpan')
cloudSpeedAddSpan.onclick = () => changeCloudSpeed(true)

const tempClodSpeed = {
    minSpeed: CLOUDS.minSpeed,
    maxSpeed: CLOUDS.maxSpeed
}

function changeCloudSpeed(isAdd) {
    tempClodSpeed.minSpeed += (isAdd) ? 0.01 : -0.01
    if (tempClodSpeed.minSpeed <= 0) tempClodSpeed.minSpeed = 0
    tempClodSpeed.maxSpeed = tempClodSpeed.minSpeed * 2

    cloudSpeedSpan.innerText = ((tempClodSpeed.minSpeed + tempClodSpeed.maxSpeed) * 0.5).toFixed(2)

    editCloudSpeed({...tempClodSpeed})
}

applyButton.onclick = () => {
    const data = JSON.parse(testDataText.value.replace(/,\s*]/g, ']').replace(/,\s*},/g, '},'))

    cloudSpeedSpan.innerText = ((CLOUDS.minSpeed + CLOUDS.maxSpeed) * 0.5).toFixed(2)
    
    setLevel( data )
    helpText.remove()

    applyButton.innerText = '–ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨'
    applyButton.onclick = () => location.reload()
    applyButton.blur()

    helpActionsText.style.display = "block"
    actionsStack.style.display = "block"
}

//

const mapGeneratorDiv = document.getElementById('map-generator')
const mapGeneratorTable = mapGeneratorDiv.querySelector('table')
const mapSizeInput = document.getElementById('map-size')
mapSizeInput.oninput = (e) => resizeMap(e.target.value)

let mapSize = 1
resizeMap(mapSize)

function resizeMap(size) {
    mapSize = (+size <= 0) ? 1 : Math.ceil(+size)
    
    mapGeneratorTable.innerHTML = ''
    for(let y = 0; y < mapSize; y++) {
        const row = document.createElement('tr')
        mapGeneratorTable.append(row)
        for(let x = 0; x < mapSize; x++) {
            const data = document.createElement('td')
            data.innerText = '+'
            data.onclick = (e) => {e.target.innerText = '*'}
            data.oncontextmenu = (e) => {e.preventDefault(); e.target.innerText = '&'}
            row.append(data)
        }
    }
}



//

let commands = [] 
document.addEventListener('keydown', (key) => {
    switch(key.code) {
        case "ArrowUp":
            commands.push(ACTIONS.forward)
            actionsStack.innerText += "‚¨Ü"
            break

        case "ArrowLeft":
            commands.push(ACTIONS.left)
            actionsStack.innerText += "‚Ü∂"
            break

        case "ArrowRight":
            commands.push(ACTIONS.right)
            actionsStack.innerText += "‚Ü∑"
            break

        case "ArrowDown":
            changeBg()
            break
        case "KeyS":
            stopBg()
            break
        case "KeyT":
            showTestBot()
            break

        case "Space":
            commands.push(ACTIONS.use)
            actionsStack.innerText += "‚ú™"
            break

        case "Enter":
            actionsStack.innerText = ""
            setCommands({
                commands: [...commands],
                callback: commandsDone,
            })
            commands = []
            break

        case "Comma" : // <
            actionsStack.innerText = ""
            setCommands({
                commands: [...commands],
                callback: commandsDone,
            })
            commands = []
            break
        case "Period" : // >
            actionsStack.innerText = ""
            setCommands({
                commands: [...commands],
                callback: commandsDone,
            })
            commands = []
            break
    }
    // console.log(key.code)
})

function commandsDone(result) {
    alert(result ? '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : ' =( –í –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±—ã–ª–∞ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞...')
}
*/